#!/usr/bin/env bash

## Usage: use_asdf [...]
#
# Loads environment variables from `asdf` current tools.
#
# If first argument is a file it is expected to be a path to a .tool-versions file.
# Otherwise two argments are expected, a plugin name and version.
# If no arguments are given, a .tool-versions file will be looked up.
use_asdf() {
  local plugin
  local version
  if [ -z "$*" ]; then
    use asdf "$(find_up .tool-versions)"
  elif [ -f "$1" ]; then
    local tool_versions="$1"
    watch_file "$tool_versions"
    local IFS
    IFS=$'\n'
    for plugin_and_version in $(cut -d'#' -f1 "$tool_versions" | awk NF | tail -r); do
      IFS=$' ' read -r plugin version <<< "$plugin_and_version"
      echo "direnv: using asdf $plugin $version"
      direnv_load _asdf_plugin_dump_env "$plugin" "$version"
    done
  elif [ -n "$1" ] && [ -n "$2" ]; then
    plugin="$1"
    version="$2"
    echo "direnv: using asdf $plugin $version"
    direnv_load _asdf_plugin_dump_env "$1" "$2"
  else
    echo "direnv: Invalid args: use asdf $*"   >&2
    echo "        use asdf TOOL_VERSIONS_FILE" >&2
    echo "        use asdf TOOL_NAME VERSION"  >&2
    return 1
  fi
}

# asdf helper: create this wrapper since asdf expects a function callback
_asdf_direnv_dump() {
  direnv dump
}

# asdf helper: dump the environment needed for plugin and version
_asdf_plugin_dump_env() {
  local plugin=$1
  local version=$2
  ( # use a sub-shell since asdf introduces set -e
    # shellcheck disable=SC1090 # Can't follow non-constant source. Use a directive to specify location.
    source "$ASDF_DIR/lib/utils.sh"
    with_plugin_env "$plugin" "$version" _asdf_direnv_dump
  )
}

